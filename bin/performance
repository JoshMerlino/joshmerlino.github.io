#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var dayjs_1 = __importDefault(require("dayjs"));
var express_1 = __importDefault(require("express"));
var duration_1 = __importDefault(require("dayjs/plugin/duration"));
var node_os_utils_1 = __importStar(require("node-os-utils"));
var pretty_bytes_1 = __importDefault(require("pretty-bytes"));
var systeminformation_1 = __importDefault(require("systeminformation"));
dayjs_1["default"].extend(duration_1["default"]);
var app = (0, express_1["default"])();
app.get("/v3/performance", function api(_req, res) {
    (function wait() {
        var isReady = true;
        for (var section in sections)
            isReady = isReady && sections[section] !== null;
        if (isReady) {
            res.json({
                success: true,
                sections: sections
            });
        }
        else
            setTimeout(wait, 10);
    }());
});
app.listen(process.env.PORT);
console.log("running on :" + process.env.PORT);
var sections = {
    cpu: null,
    ram: null,
    disk: null,
    network: null
};
var cpuUsage = Array(60).fill(0);
var memUsage = Array(60).fill(0);
var diskUsage = Array(60).fill(0);
var netUsage = Array(60).fill(0);
(function stat() {
    return __awaiter(this, void 0, void 0, function () {
        var cpu, usageNow;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, systeminformation_1["default"].cpu()];
                case 1:
                    cpu = _a.sent();
                    return [4 /*yield*/, node_os_utils_1["default"].cpu.usage()];
                case 2:
                    usageNow = (_a.sent()) / node_os_utils_1["default"].cpu.count() / 100;
                    cpuUsage.push(usageNow);
                    cpuUsage.shift();
                    sections.cpu = {
                        title: "CPU",
                        subtitle: "".concat(cpu.manufacturer, " ").concat(cpu.brand),
                        description: "% Utilization over 60 seconds",
                        usageHistory: cpuUsage,
                        usageNow: usageNow,
                        color: "#0ea5e9",
                        info: {
                            left: [{
                                    name: "Utilization",
                                    value: usageNow,
                                    value_formatted: "".concat(Math.round(usageNow * 100), "%")
                                }, {
                                    name: "Speed",
                                    value: cpu.speed,
                                    value_formatted: "".concat(cpu.speed, " GHz")
                                },
                                null,
                                {
                                    name: "Up time",
                                    value: node_os_utils_1.os.uptime(),
                                    value_formatted: dayjs_1["default"].duration(node_os_utils_1.os.uptime() * 1000).format("D:HH:mm:ss")
                                }],
                            right: [{
                                    name: "Base speed",
                                    value: cpu.speedMax || cpu.speed,
                                    value_formatted: "".concat(cpu.speedMax || cpu.speed, " GHz")
                                }, {
                                    name: "Sockets",
                                    value: parseInt(cpu.socket || "1"),
                                    value_formatted: parseInt(cpu.socket || "1").toString()
                                }, {
                                    name: "Cores",
                                    value: cpu.physicalCores,
                                    value_formatted: cpu.physicalCores.toString()
                                }, {
                                    name: "Logical processors",
                                    value: cpu.cores,
                                    value_formatted: cpu.cores.toString()
                                }, {
                                    name: "Virtualization",
                                    value: cpu.virtualization,
                                    value_formatted: cpu.virtualization ? "Enabled" : "Disabled"
                                }]
                        }
                    };
                    setTimeout(stat, 1000);
                    return [2 /*return*/];
            }
        });
    });
}());
(function stat() {
    return __awaiter(this, void 0, void 0, function () {
        var mem, memlayout, usageNow;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, systeminformation_1["default"].mem()];
                case 1:
                    mem = _a.sent();
                    return [4 /*yield*/, systeminformation_1["default"].memLayout()];
                case 2:
                    memlayout = _a.sent();
                    usageNow = mem.used / mem.total;
                    memUsage.push(usageNow);
                    memUsage.shift();
                    sections.ram = {
                        title: "Memory",
                        subtitle: (0, pretty_bytes_1["default"])(memlayout[0].size),
                        description: "Memory usage",
                        usageHistory: memUsage,
                        usageNow: usageNow,
                        color: "#a855f7",
                        info: {
                            left: [{
                                    name: "In use",
                                    value: mem.used,
                                    value_formatted: (0, pretty_bytes_1["default"])(mem.used)
                                }, {
                                    name: "Available",
                                    value: mem.free,
                                    value_formatted: (0, pretty_bytes_1["default"])(mem.free)
                                },
                                null,
                                {
                                    name: "Swap use",
                                    value: mem.swapused,
                                    value_formatted: (0, pretty_bytes_1["default"])(mem.swapused)
                                }, {
                                    name: "Swap available",
                                    value: mem.swapfree,
                                    value_formatted: (0, pretty_bytes_1["default"])(mem.swapfree)
                                }],
                            right: [{
                                    name: "Memory total",
                                    value: mem.total + mem.total,
                                    value_formatted: (0, pretty_bytes_1["default"])(mem.total + mem.total)
                                }, {
                                    name: "Memory used",
                                    value: mem.swapused + mem.used,
                                    value_formatted: (0, pretty_bytes_1["default"])(mem.swapused + mem.used)
                                }, {
                                    name: "Memory available",
                                    value: mem.swapfree + mem.free,
                                    value_formatted: (0, pretty_bytes_1["default"])(mem.swapfree + mem.free)
                                }]
                        }
                    };
                    setTimeout(stat, 1000);
                    return [2 /*return*/];
            }
        });
    });
}());
(function stat() {
    return __awaiter(this, void 0, void 0, function () {
        var disks, usageNow;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, systeminformation_1["default"].fsSize()];
                case 1:
                    disks = _a.sent();
                    usageNow = disks.reduce(function (a, b) { return a + b.used; }, 0) / disks.reduce(function (a, b) { return a + b.size; }, 0);
                    diskUsage.push(usageNow);
                    diskUsage.shift();
                    sections.disk = {
                        title: "Disk",
                        subtitle: "",
                        description: "Disk usage",
                        usageHistory: diskUsage,
                        usageNow: usageNow,
                        color: "#22c55e",
                        info: {
                            left: [{
                                    name: "In use",
                                    value: disks.reduce(function (a, b) { return a + b.used; }, 0),
                                    value_formatted: (0, pretty_bytes_1["default"])(disks.reduce(function (a, b) { return a + b.used; }, 0))
                                }, {
                                    name: "Total",
                                    value: disks.reduce(function (a, b) { return a + b.size; }, 0),
                                    value_formatted: (0, pretty_bytes_1["default"])(disks.reduce(function (a, b) { return a + b.size; }, 0))
                                }],
                            right: []
                        }
                    };
                    setTimeout(stat, 1000);
                    return [2 /*return*/];
            }
        });
    });
}());
(function stat() {
    return __awaiter(this, void 0, void 0, function () {
        var stats, interfaces, speed, usageNow;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, systeminformation_1["default"].networkStats()];
                case 1:
                    stats = _a.sent();
                    return [4 /*yield*/, systeminformation_1["default"].networkInterfaces()];
                case 2:
                    interfaces = (_a.sent()).filter(function (i) { return i.ip4.startsWith("10.16") || i.ip4.startsWith("192.168.75"); });
                    speed = interfaces[0].speed * 1000000;
                    usageNow = stats.reduce(function (a, b) { return a + b.rx_sec * 8; }, 0) / speed;
                    netUsage.push(usageNow);
                    netUsage.shift();
                    sections.network = {
                        title: "Network",
                        subtitle: (0, pretty_bytes_1["default"])(speed, { bits: true }),
                        description: "Network usage",
                        usageHistory: netUsage,
                        usageNow: usageNow,
                        color: "#eab308",
                        info: {
                            left: [{
                                    name: "Download",
                                    value: stats.reduce(function (a, b) { return a + b.rx_sec * 8; }, 0),
                                    value_formatted: (0, pretty_bytes_1["default"])(stats.reduce(function (a, b) { return a + b.rx_sec * 8; }, 0), { bits: true }) + "/s"
                                }, {
                                    name: "Upload",
                                    value: stats.reduce(function (a, b) { return a + b.tx_sec * 8; }, 0),
                                    value_formatted: (0, pretty_bytes_1["default"])(stats.reduce(function (a, b) { return a + b.tx_sec * 8; }, 0), { bits: true }) + "/s"
                                }],
                            right: []
                        }
                    };
                    setTimeout(stat, 1000);
                    return [2 /*return*/];
            }
        });
    });
}());
